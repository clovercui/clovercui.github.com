<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clover Blog</title>
    <description>克洛弗，Web &amp; Mobile Lover，Front-End Engineer，UX Designer，PHP&amp;JAVA Engineer | 这里是 @Clover克洛弗 的个人博客，与你一起发现更大的世界。</description>
    <link>http://clover.htmhub.com/</link>
    <atom:link href="http://clover.htmhub.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 07 Mar 2017 15:16:52 +0800</pubDate>
    <lastBuildDate>Tue, 07 Mar 2017 15:16:52 +0800</lastBuildDate>
    <generator>Jekyll v3.0.3</generator>
    
      <item>
        <title>Html基础-3</title>
        <description>&lt;h1&gt;HTML-3&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/&quot;&gt;css行高line-height的一些深入理解及应用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;code&gt;line-height有什么作用?&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;line-height 属性设置行间的距离（行高），不能使用负值。该属性会影响行框的布局。在应用到一个块级元素时，它定义了该元素中基线之间的最小距离而不是最大距离。line-height 与 font-size 的计算值之差(行距)分为两半，分别加到一个文本行内容的顶部和底部。可以包含这些内容的最小框就是行框。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;line-height可以被定义为normal。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;body { line-height:normal; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;line-height可以被定义为继承&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p { line-height:inherit; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;line-height可以使用一个百分比的值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p { line-height:120%; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;line-height可以被定义为一个长度值（单位px、em等）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p { line-height:20px; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;line-height也可以被定义为纯数字（甚至没有单位）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p { line-height:1.2; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;&lt;code&gt;如何去查CSS属性的兼容性？比如inline-block哪些浏览器支持？&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;去Can I use 网站查询  &lt;a href=&quot;http://caniuse.com/&quot;&gt;CanIUse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在输入框中查询要查询的属性
inline-block的兼容性：
&lt;img src=&quot;/img/ciuinlineblock.png&quot; alt=&quot;inline-block兼容性&quot;&gt;&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;a 标签的href, title, target 是什么？ title 和 alt有什么区别？如何新窗口打开链接?&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;href&lt;/code&gt;是a标签的链接地址。可以是个链接地址，也可以是一个锚点地址。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;title&lt;/code&gt; 是a标签的标题，鼠标移动上之后显示的名称&lt;/p&gt;

&lt;p&gt;&lt;code&gt;target&lt;/code&gt; 是 a 标签打开链接的方式，主要有&lt;code&gt;_blank&lt;/code&gt;:浏览器总在一个新打开、未命名的窗口中载入目标文档；&lt;code&gt;_self&lt;/code&gt;:这个目标的值对所有没有指定目标的 &lt;a&gt; 标签是默认目标，它使得目标文档载入并显示在相同的框架或者窗口中作为源文档。这个目标是多余且不必要的，除非和文档标题 &lt;base&gt; 标签中的 target 属性一起使用；&lt;code&gt;_parent&lt;/code&gt;：这个目标使得文档载入父窗口或者包含来超链接引用的框架的框架集。如果这个引用是在窗口或者在顶级框架中，那么它与目标 &lt;em&gt;self 等效；`&lt;/em&gt;top&lt;code&gt;：这个目标使得文档载入包含这个超链接的窗口，用 _top 目标将会清除所有被包含的框架并将文档载入整个浏览器窗口。&lt;/code&gt;framename`:在指定的框架中打开被链接文档。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;title 和 alt区别&lt;/code&gt;:title作为属性时，用来为元素提供额外说明信息，例如，给超链接标签a添加了title属性，把鼠标移动到该链接上面是，就会显示title的内容，以达到补充说明或者提示的效果。alt属性则是用来指定替换文字，只能用在img、area和input元素中（包括applet元素），用于网页中图片无法正常显示时给用户提供文字说明使其了解图像信息。alt是替代图像作用而不是提供额外说明文字的。根据一些SEO人士的说法，使用alt属性还具有搜索引擎优化效果，因为搜素引擎是无法直接读取图像的信息的，alt可以为其提供文字信息所以对搜索引擎比较友好&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;#39;https://www.baidu.com&amp;#39; target=&amp;#39;_blank&amp;#39;&amp;gt;在新的窗口打开连接&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;display: none , visibility: hidden, opacity:0 有什么作用？有什么区别？&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉,&lt;code&gt;无体积,脱离文档流&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;visibility=hidden，把元素隐藏起来了，但不会改变页面布局，不会触发该元素已经绑定的事件，&lt;code&gt;有体积，在文档流内&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;opacity=0，该元素隐藏起来了，但不会改变页面布局，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的 &lt;code&gt;有体积,在文档里内&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;code&gt;如何去除 a 链接的默认样式？直接在 a 链接父容器添加颜色，能否继承到当前 a 链接上？&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在a的style中加入text-decoration:none；可以去除a的默认样式&lt;/p&gt;

&lt;p&gt;直接在 a 链接父容器添加颜色，不能继承到当前 a 链接上&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a标签不会使用继承属性&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2017/03/07/html-3/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2017/03/07/html-3/</guid>
        
        <category>Clover</category>
        
        <category>前端</category>
        
        <category>HTML</category>
        
        
      </item>
    
      <item>
        <title>Html基础-2</title>
        <description>&lt;h1&gt;HTML-2&lt;/h1&gt;

&lt;h2&gt;&lt;code&gt;样式有几种引入方式? link 和 @import有什么区别&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.内联方式&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;div style=&quot;background: red&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变当前标签的样式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;2.嵌入方式&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;嵌入方式指的是在 HTML 头部中的 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 标签下书写 CSS 代码。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;
    .content {
        background: red;
    }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嵌入方式的 CSS 只对当前的网页有效。因为 CSS 代码是在 HTML 文件中，所以会使得代码比较集中，当我们写模板网页时这通常比较有利。因为查看模板代码的人可以一目了然地查看 HTML 结构和 CSS 样式。因为嵌入的 CSS 只对当前页面有效，所以当多个页面需要引入相同的 CSS 代码时，这样写会导致代码冗余，也不利于维护。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;3.链接方式&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;链接方式指的是使用 HTML 头部的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 标签引入外部的 CSS 文件。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;lt;head&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是最常见的也是最推荐的引入 CSS 的方式。使用这种方式，所有的 CSS 代码只存在于单独的 CSS 文件中，所以具有良好的可维护性。并且所有的 CSS 代码只存在于 CSS 文件中，CSS 文件会在第一次加载时引入，以后切换页面时只需加载 HTML 文件即可&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;4.导入方式&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;导入方式指的是使用 CSS 规则引入外部 CSS 文件
&lt;code&gt;
&amp;lt;style&amp;gt;
    @import url(style.css);
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;link和@import的区别是?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;两者都是外部引用CSS的方式，但是存在一定的区别&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。&lt;/li&gt;
&lt;li&gt;区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。&lt;/li&gt;
&lt;li&gt;区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。&lt;/li&gt;
&lt;li&gt;区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;code&gt;文件路径../main.css 、./main.css、main.css、/main.css有什么区别&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;../main.css&lt;/code&gt; 是当前目录的上级目录引入main.css&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./main.css&lt;/code&gt; 是当前目录引入main.css&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.css&lt;/code&gt; 同&lt;code&gt;./main.css&lt;/code&gt; 是当前目录引入main.css&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/main.css&lt;/code&gt; 是在网站根目录引入main.css&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;console.log是做什么用的&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;
在控制台使用 log方式输出信息，还看查看对象的具体内容。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;text-align有几个值，分别有什么作用？为什么text-align:justify没有效果？写截图说明区别&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-align&lt;/code&gt;:left,right,center,justify,start,end,inherit,initial&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-align:justify&lt;/code&gt; 不起作用因为text-align不会处理被打断的行和最后一行。一行文本不进行处理。还有就是强制换行的也不处理。所以你强制占满了一行他才处理。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;px、em、rem分别是什么？有什么区别？如何使用&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;
&lt;code&gt;px&lt;/code&gt; PX实际上就是像素,用PX设置字体大小时，比较稳定和精确.但是这种方法存在一个问题，当用户在浏览器中浏览我们制作的Web页面时，如果改变了浏览器的缩放，这时会使用我们的Web页面布局被打破。这样对于那些关心自己网站可用性的用户来说，就是一个大问题了。因此，这时就提出了使用“em”来定义Web页面的字体&lt;/p&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt; em是相对于父元素的属性而计算的.EM就是根据基准来缩放字体的大小。EM实质是一个相对值，而非具体的数值。这种技术需要一个参考点，一般都是以&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;的“font-size”为基准。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rem&lt;/code&gt; EM是相对于其父元素来设置字体大小的，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而Rem是相对于根元素&lt;html&gt;，这样就意味着，我们只需要在根元素确定一个参考值
&lt;code&gt;浏览器的兼容性 除了IE6-IE8r，其它的浏览器都支持em和rem属性，px是所有浏览器都支持。
因此为了浏览器的兼容性，可“px”和“rem”一起使用，用&amp;quot;px&amp;quot;来实现IE6-8下的效果，然后使用“Rem”来实现代浏览器的效果。&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2017/03/06/html-2/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2017/03/06/html-2/</guid>
        
        <category>Clover</category>
        
        <category>前端</category>
        
        <category>HTML</category>
        
        
      </item>
    
      <item>
        <title>Html基础-1</title>
        <description>&lt;h1&gt;HTML-1&lt;/h1&gt;

&lt;h2&gt;&lt;code&gt;网页乱码的问题是如何产生的？怎样解决?&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;造成html网页乱码原因主要是html源代码内中文字内容与html编码不同造成。解决办法：保持文件的编写字符集和网页设置的字符集保持一致 如使用UTF-8编写的文件，网页头设置为&lt;code&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;颜色有几种写法， 红色、 绿色、蓝色、白色、黑色如何表示？ 透明黑色如何表示？#ccc的颜色#eee的颜色？ #333的颜色？&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;直接书写英文名字&lt;/code&gt;。这样的好处是直观。但是没有能很好的控制颜色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rgb(0,0,0)&lt;/code&gt;中间的三个 数字分别是0-255.分别代表红  绿  蓝三个颜色。数字数字越大，颜色越深&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#FCFCFC&lt;/code&gt; 这样是用十六进制来表示颜色。跟上面rgb差不多。两位英文代表一个原色。分别是红绿蓝。这种写法有缩写。比如#FFFFFF可以等于成#FFF，还有#CCFFCC,可以写成#CFC。这就是颜色的写法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rgba（0，0，0，0）&lt;/code&gt;前面三个数字跟rgb一样的，最后一个是透明度的控制。取值范围是0-1.一位小数。越接近零。越透明。    &lt;code&gt;注意的是。这种有兼容问题。是CSS3的属性&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;红色&lt;code&gt;red&lt;/code&gt;、 绿色&lt;code&gt;green&lt;/code&gt;、蓝色&lt;code&gt;blue&lt;/code&gt;、白色&lt;code&gt;white&lt;/code&gt;、黑色&lt;code&gt;black&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;透明黑色 &lt;code&gt;rgba(0,0,0,0.8)&lt;/code&gt; ,#ccc &lt;code&gt;深灰色&lt;/code&gt; #eee &lt;code&gt;浅灰色&lt;/code&gt; #333 &lt;code&gt;浅黑色&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt; 的作用是什么&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;告知浏览器以Html5的标准来解析页面，Html5相对宽松，没有严格模式和混杂模式之分。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;严格模式和混杂模式指什么&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;&amp;lt;!DOCTYPE&amp;gt;声明叫做文件类型定义（DTD），声明的作用为了告诉浏览器该文件的类型。让浏览器解析器知道应该用哪个规范来解析文档。&amp;lt;!DOCTYPE&amp;gt;声明必须在 HTML 文档的第一行，这并不是一个 HTML 标签。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;严格模式：&lt;/code&gt;又称标准模式，是指浏览器按照 W3C 标准解析代码.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;混杂模式：&lt;/code&gt;又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD ——严格模式） &lt;/li&gt;
&lt;li&gt;包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式） &lt;/li&gt;
&lt;li&gt;DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD不存在或者格式不正确——混杂模式）&lt;/li&gt;
&lt;li&gt;HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。（ HTML5 没有严格和混杂之分）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;&lt;code&gt;meta 有什么作用，常见的值有哪些&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;meta标签共有两个属性，它们分别是&lt;code&gt;http-equiv&lt;/code&gt;属性和&lt;code&gt;name&lt;/code&gt;属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name属性&lt;/code&gt;
name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。
meta标签的name属性语法格式是：&lt;code&gt;＜meta name=&amp;quot;参数&amp;quot; content=&amp;quot;具体的参数值&amp;quot;＞&lt;/code&gt; 。
其中name属性主要有以下几种参数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Keywords(关键字)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：keywords用来告诉搜索引擎你网页的关键字是什么&lt;/p&gt;

&lt;p&gt;举例：＜meta name =&amp;quot;keywords&amp;quot; content=&amp;quot;science,education,culture,politics,ecnomics，relationships, entertaiment, human&amp;quot;＞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;description(网站内容描述)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：description用来告诉搜索引擎你的网站主要内容。&lt;/p&gt;

&lt;p&gt;举例：＜meta name=&amp;quot;description&amp;quot; content=&amp;quot;This page is about the meaning of science, education,culture.&amp;quot;＞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;robots(机器人向导)&lt;/code&gt;
　　
说明：robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。&lt;/p&gt;

&lt;p&gt;举例：＜meta name=&amp;quot;robots&amp;quot; content=&amp;quot;none&amp;quot;＞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;author(作者)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：标注网页的作者&lt;/p&gt;

&lt;p&gt;举例：＜meta name=&amp;quot;author&amp;quot; content=&amp;quot;root,root@21cn.com&amp;quot;＞&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;http-equiv属性&lt;/code&gt;
http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值.
meta标签的http-equiv属性语法格式是：＜meta http-equiv=&amp;quot;参数&amp;quot; content=&amp;quot;参数变量值&amp;quot;＞ ；其中http-equiv属性主要有以下几种参数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Expires(期限)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。&lt;/p&gt;

&lt;p&gt;用法：＜meta http-equiv=&amp;quot;expires&amp;quot; content=&amp;quot;Fri, 12 Jan 2001 18:18:18 GMT&amp;quot;＞&lt;/p&gt;

&lt;p&gt;注意：必须使用GMT的时间格式。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Pragma(cache模式)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：禁止浏览器从本地计算机的缓存中访问页面内容。&lt;/p&gt;

&lt;p&gt;用法：＜meta http-equiv=&amp;quot;Pragma&amp;quot; content=&amp;quot;no-cache&amp;quot;＞&lt;/p&gt;

&lt;p&gt;注意：这样设定，访问者将无法脱机浏览。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Refresh(刷新)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：自动刷新并指向新页面。&lt;/p&gt;

&lt;p&gt;用法：＜meta http-equiv=&amp;quot;Refresh&amp;quot; content=&amp;quot;2；URL=http://www.root.net&amp;quot;＞&lt;/p&gt;

&lt;p&gt;注意：其中的2是指停留2秒钟后自动刷新到URL网址。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Set-Cookie(cookie设定)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：如果网页过期，那么存盘的cookie将被删除。&lt;/p&gt;

&lt;p&gt;用法：＜meta http-equiv=&amp;quot;Set-Cookie&amp;quot; content=&amp;quot;cookievalue=xxx; expires=Friday, 12-Jan-2001 18:18:18 GMT； path=/&amp;quot;＞&lt;/p&gt;

&lt;p&gt;注意：必须使用GMT的时间格式。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Window-target(显示窗口的设定)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：强制页面在当前窗口以独立页面显示。&lt;/p&gt;

&lt;p&gt;用法：＜meta http-equiv=&amp;quot;Window-target&amp;quot; content=&amp;quot;_top&amp;quot;＞&lt;/p&gt;

&lt;p&gt;注意：用来防止别人在框架里调用自己的页面。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;content-Type(显示字符集的设定)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明：设定页面使用的字符集。&lt;/p&gt;

&lt;p&gt;用法：＜meta http-equiv=&amp;quot;content-Type&amp;quot; content=&amp;quot;text/html; charset=gb2312&amp;quot;＞&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;X-UA-compatible&amp;quot; content=&amp;quot;IE=edge,chrome=1&amp;quot;&amp;gt;有什么作用&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;A:&lt;/code&gt;这个属性主要是设置浏览器优先使用什么模式来渲染页面的.
以上代码IE=edge告诉IE使用最新的edge引擎渲染网页，chrome=1则可以激活Chrome Frame&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;常见的浏览器有哪些，什么内核&lt;/code&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;Trident&lt;/code&gt;的是internet explorer，国产的绝大部分浏览器。Trident是就是ie内核&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Gecko&lt;/code&gt;的是Mozilla Firefox，使用 Gecko 内核的浏览器也有不少，如 Netscape MozillaSuite/SeaMonkey 等&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Presto&lt;/code&gt;的是opera，这是目前公认网页浏览速度最快的浏览器内核&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;WebKit&lt;/code&gt;的有苹果的safari，谷歌的chrome，还有国产的大部分双核浏览器其中一核就是WebKit&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2017/03/01/html-1/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2017/03/01/html-1/</guid>
        
        <category>Clover</category>
        
        <category>前端</category>
        
        <category>HTML</category>
        
        
      </item>
    
      <item>
        <title>Linux命令行基础</title>
        <description>&lt;h1&gt;Linux命令行基础&lt;/h1&gt;

&lt;h2&gt;一些名词&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;「图形界面」&lt;/code&gt;、&lt;code&gt;「命令行」&lt;/code&gt;、&lt;code&gt;「终端」&lt;/code&gt;、&lt;code&gt;「shell」&lt;/code&gt;、&lt;code&gt;「bash」&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;安装使用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Windws: 安装git, 打开 gitbash&lt;/li&gt;
&lt;li&gt;Linux 打开终端&lt;/li&gt;
&lt;li&gt;Mac 打开终端&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;基本命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;查看当前完整路径&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;查看当前目录下文件&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 不包括隐藏文件&lt;/span&gt;
ls

&lt;span class=&quot;c&quot;&gt;# 查看当前目录下所有文件(包括隐藏文件)&lt;/span&gt;
ls -a

&lt;span class=&quot;c&quot;&gt;# 查看当前目录下所有文件(包括隐藏文件)的详细信息&lt;/span&gt;
ls -al
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;切换目录&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /c/project
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;code
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../css
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;创建文件&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch readme.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;删除文件&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#创建readme.md&lt;/span&gt;
rm readme.md 

&lt;span class=&quot;c&quot;&gt;#删除node_modules文件夹，不提示&lt;/span&gt;
rm -rf node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;重命名文件&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mv readme.md README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建文件夹&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir projects
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;文件路径&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;根目录&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;家目录&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;当前目录&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;books
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./books
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;上级目录&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;编辑器VIM&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;vim a.md&lt;/code&gt; 初始进入编辑器命令模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; 进入编辑模式&lt;/li&gt;
&lt;li&gt;键盘左上角&lt;code&gt;esc&lt;/code&gt; 进入命令命令模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; 保存退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; 不保存强制退出&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 28 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2017/02/28/linux-cli/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2017/02/28/linux-cli/</guid>
        
        <category>Clover</category>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>PHP设计模式-Part2 创建型</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考资料《大话设计模式》
作者程杰&lt;/p&gt;

&lt;p&gt;参考 http://blog.csdn.net/jhq0113/article/details/44906491&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;设计模式-创建型&lt;/h1&gt;

&lt;h2&gt;1.简单工厂模式&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;简单工厂模式&lt;/code&gt;:不属于23种常用面向对象设计模式之一。简单工厂模式是由&lt;code&gt;一个工厂对象决定创建出哪一种产品类的实例&lt;/code&gt;。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。其实质是由一个工厂类&lt;code&gt;根据传入的参数，动态决定应该创建哪一个产品类&lt;/code&gt;（这些产品类继承自一个父类或接口）的实例
&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150409224555911.jpeg&quot; alt=&quot;pp&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;角色和职责&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;工厂(SimpleFactory)角色&lt;/code&gt;：简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。&lt;code&gt;工厂类可以被外界直接调用，创建所需的产品对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;抽象产品（IProduct）角色&lt;/code&gt;:简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;具体产品（Concrete Product）角色&lt;/code&gt;:是简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：根据提供相应的属性值由简单工厂创建具有相应特性的产品对象&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;  
    &lt;span class=&quot;sd&quot;&gt;/** 
     * Created by PhpStorm. 
     * User: Jiang 
     * Date: 2015/4/9 
     * Time: 21:48 
     */&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**抽象产品角色 
     * Interface IProduct   产品接口 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IProduct&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;sd&quot;&gt;/**X轴旋转 
         * @return mixed 
         */&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  

        &lt;span class=&quot;sd&quot;&gt;/**Y轴旋转 
         * @return mixed 
         */&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;YRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**具体产品角色 
     * Class XProduct        X轴旋转产品 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XProduct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IProduct&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;您好，我是X轴旋转产品，X轴转转转。。。。。。&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;YRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;抱歉，我是X轴旋转产品，我没有Y轴。。。。。。&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**具体产品角色 
     * Class YProduct        Y轴旋转产品 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YProduct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IProduct&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;抱歉，我是Y轴旋转产品，我没有X轴。。。。。。&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;YRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;您好，我是Y轴旋转产品，Y轴转转转。。。。。。&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**具体产品角色 
     * Class XYProduct        XY轴都可旋转产品 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XYProduct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IProduct&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;您好，我是XY轴都可旋转产品，X轴转转转。。。。。。&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;YRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;您好，我是XY轴都可旋转产品，Y轴转转转。。。。。。&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**工厂角色 
     * Class ProductFactory 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductFactory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XYProduct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$yMax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;        &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;  
    &lt;span class=&quot;sd&quot;&gt;/** 
     * Created by PhpStorm. 
     * User: Jiang 
     * Date: 2015/4/9 
     * Time: 21:54 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./SimpleFactory/SimpleFactory.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

    &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type:text/html;charset=utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

    &lt;span class=&quot;nv&quot;&gt;$pro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;nv&quot;&gt;$pro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProductFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;nv&quot;&gt;$pro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProductFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;nv&quot;&gt;$pro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProductFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;nv&quot;&gt;$pro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProductFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pro&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;XRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;YRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;非法产品！&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;hr/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用浏览器访问测试代码，我们可以发现创建的对象依次是YProduct,XProduct,XYProduct,null。简单工厂的核心代码在于工厂(ProductFactory)这个角色，这里根据传入的xMax与yMax值去创建不同的对象，这便是简单工厂的实质，而且我们在测试调用客户端根本不知道具体的产品类是什么样，这样就做到了调用与创建的分离&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：让对象的调用者和对象创建过程分离，当对象调用者需要对象时，直接向工厂请求即可。从而&lt;code&gt;避免了对象的调用者与对象的实现类以硬编码方式耦合，以提高系统的可维护性、可扩展性。&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：当产品修改时，工厂类也要做相应的修改，比如要增加一种操作类，如求M数的N次方，就得改case,修改原有类，&lt;code&gt;违背了开放-封闭原则&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2.工厂方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;具体案例&lt;/strong&gt;：请MM去麦当劳吃汉堡，不同的MM有不同的口味，要每个都记住是一件烦人的事情，我们一般采用FactoryMethod模式，带着MM到服务员那儿，说“要一个汉堡”，具体要什么样的汉堡呢，让MM直接跟服务员说就行了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工厂方法模式核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节，如下图：&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150416222830823.png&quot; alt=&quot;ww&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;角色和职责&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;抽象工厂角色（IServerFactory）&lt;/code&gt;：是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;具体工厂角色(ChickenLegBaoFactory)&lt;/code&gt;:这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建产品对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;抽象产品角色(IHanbao)&lt;/code&gt;:工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;具体产品角色(ChickenLegBao)&lt;/code&gt;:这个角色实现了抽象产品角色所定义的接口。某具体产品有专门的具体工厂创建，它们之间往往一一对应&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;  
    &lt;span class=&quot;sd&quot;&gt;/** 
     * Created by PhpStorm. 
     * User: Jiang 
     * Date: 2015/4/16 
     * Time: 22:12 
     */&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**抽象产品角色       汉堡 
     * Interface IHanbao 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IHanbao&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Allay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**具体产品角色         肉松汉堡 
     * Class RouSongBao 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RouSongBao&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IHanbao&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Allay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I am 肉松汉堡，小的给主人解饿了！&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**鸡肉汉堡 
     * Class ChickenBao 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChickenBao&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IHanbao&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Allay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I am 鸡肉汉堡，小的给主人解饿了！&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**抽象工厂角色 
     * Interface IServerFactory 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IServerFactory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakeHanbao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;sd&quot;&gt;/**具体工厂角色     肉松汉堡工厂 
     * Class RouSongFactory 
     */&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RouSongFactory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IServerFactory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakeHanbao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouSongBao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChickenFactory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IServerFactory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakeHanbao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChickenBao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;测试代码&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;    header(&quot;Content-Type:text/html;charset=utf-8&quot;);  
    //------------------------工厂方式测试代码------------------  
    require_once &quot;./FactoryMethod/FactoryMethod.php&quot;;  

    //-----------------餐厅厨师-----------  
    $chickenFactory=new ChickenFactory();  
    $rouSongFactory=new RouSongFactory();  

    //-----------点餐------------  
    $chicken1=$chickenFactory-&amp;gt;MakeHanbao();  
    $chicken2=$chickenFactory-&amp;gt;MakeHanbao();  
    $rouSong1=$rouSongFactory-&amp;gt;MakeHanbao();  
    $rouSong2=$rouSongFactory-&amp;gt;MakeHanbao();  

    //------------------顾客吃饭---------  
    $chicken1-&amp;gt;Allay();  
    $chicken2-&amp;gt;Allay();  
    $rouSong1-&amp;gt;Allay();  
    $rouSong2-&amp;gt;Allay();  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用浏览器运行测试代码我们可以发现，顾客都享用了自己的食物&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;:&lt;code&gt;克服了简单工厂模式违背开放-封闭的原则&lt;/code&gt;，保持了封装对象创建过程的优点 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：当增加产品时，就得增加一个产品工厂的类，增加额外的开发量。避免不了分支判断的问题&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;简单工厂模式与工厂方法模式的比较&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.结构复杂度&lt;/code&gt;:简单工厂模式要占优。简单工厂模式只需一个工厂类，而工厂方法模式的工厂类随着产品类个数增加而增加，从而增加了结构的复杂程度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2.代码复杂度&lt;/code&gt; :代码复杂度和结构复杂度是一对矛盾，既然简单工厂模式在结构方面相对简洁，那么它在代码方面肯定是比工厂方法模式复杂的了。简单工厂模式的工厂类随着产品类的增加需要增加很多方法（或代码），而工厂方法模式每个具体工厂类只完成单一任务，代码简洁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3.管理上的难度&lt;/code&gt;:假如某个具体产品类需要进行一定的修改，很可能需要修改对应的工厂类。当同时需要修改多个产品类的时候，对工厂类的修改会变得相当麻烦。反而简单工厂没有这些麻烦，当多个产品类需要修改是，简单工厂模式仍然仅仅需要修改唯一的工厂类。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 29 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2016/11/29/design-pattern-2/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2016/11/29/design-pattern-2/</guid>
        
        <category>Clover</category>
        
        <category>设计模式</category>
        
        <category>PHP</category>
        
        
      </item>
    
      <item>
        <title>PHP设计模式-Part1 理论篇</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考资料《大话设计模式》
作者程杰&lt;/p&gt;

&lt;p&gt;参考 http://blog.csdn.net/jhq0113/article/details/44906491&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;设计模式-概述&lt;/h1&gt;

&lt;h2&gt;1.什么是设计模式&lt;/h2&gt;

&lt;p&gt;设计模式（Design Pattern）是一套&lt;code&gt;被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结&lt;/code&gt;。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。&lt;/p&gt;

&lt;h2&gt;2.设计模式的优点&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;复用解决方案&lt;/code&gt;：设计模式本身就是对某一类问题的通用解决方案，是更高级别的复用，已经超出了代码复用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;确定通用术语&lt;/code&gt;：开发中的交流和协作都需要共同的词汇其础和对问题的共识.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代码更易于修改与维护&lt;/code&gt;：因为设计模式都是久经考验的解决方案,它们的结构都是经过长期的发展形成的，善于应对变化，设计模式本身也是对变化点的封装&lt;/li&gt;
&lt;li&gt;&lt;code&gt;模式有助于提高思考层次&lt;/code&gt;。学习模式后,就算不用模式中的方法，也会更好的采取更好的策略去解决问题&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;3.资源&lt;/h2&gt;

&lt;p&gt;更多详情敬请关注我的视频课程：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://edu.csdn.net/course/detail/602&quot;&gt;PHP面向对象设计模式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;分享一个我在公司内部培训的资料，C#实例源代码及类图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1qWOE5dy&quot;&gt;设计模式源代码及UML类图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对应23种面向对象设计模式PPT：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pan.baidu.com/s/1i3zksE5&quot;&gt;23种常用面向对象设计模式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/dragonpeng2008/article/details/6836448&quot;&gt;UML类图总结&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;设计模式-六大原则&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;单一职责&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;里氏替换&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;依赖倒置&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;接口隔离&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;迪米特法则&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;开闭原则&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406222929184.jpeg&quot; alt=&quot;六大原则&quot;&gt;&lt;/p&gt;

&lt;h2&gt;1.单一职责&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：&lt;code&gt;不要存在多于一个导致类变更的原因。&lt;/code&gt;通俗的说，即一个类只负责一项职责。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障，关系如下图：&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406223705732.jpeg&quot; alt=&quot;p1&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;修改&lt;/strong&gt;: &lt;code&gt;遵循单一职责原则.&lt;/code&gt;分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险，结构如下图： &lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406223805012.jpeg&quot; alt=&quot;p2&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1)可以降低类的复杂度，一个类只负责一项职责，逻辑简单&lt;/li&gt;
&lt;li&gt;2)提高类的可读性，提高系统的可维护性；&lt;/li&gt;
&lt;li&gt;3)变更引起的风险降低，变更是必然的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2.里氏替换原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：所有引用基类的地方必须能透明地使用其子类的对象，也就是说&lt;code&gt;子类可以扩展父类的功能，但不能改变父类原有的功能&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障，如下图 &lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406224441455.jpeg&quot; alt=&quot;p2&quot;&gt;
CountPriceByJKL类继承于CountPrice类，CountPriceByJKL重写了Count()方法，这样可能影响到原来Count方法的功能。

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;修改&lt;/strong&gt;: 当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;3.依赖倒置原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象&lt;/p&gt;

&lt;p&gt;此处理解起来是最困难的，一般会在项目框架的搭建的时候用到，例如，业务逻辑层相对于数据层是高层模块，因为业务逻辑层需要调用数据层去连接数据库，但是要做到可扩展高复用，尽量不要让业务逻辑层依赖数据层，可以在数据层抽象出一个接口，让业务逻辑层依赖于这个抽象接口&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：类A（高层模块）直接依赖类B（低层模块），假如要将类A改为依赖类C（低层模块），则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原子操作；假如修改类A，会给程序带来不必要的风险。&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406225436362.jpeg&quot; alt=&quot;p2&quot;&gt;&lt;/p&gt;

&lt;p&gt;AutoSystem类直接依赖于HondaCar与FordCar两个类，这样就产生了一个高耦合，AutoSystem类想操控HondaCar或者FordCar必须直接创建相应对象。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;修改&lt;/strong&gt;: 将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率，如下图：&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406225842955.jpeg&quot; alt=&quot;p2&quot;&gt;&lt;/p&gt;

&lt;p&gt;经过此番修改，Honda与Ford实现ICar接口，提供了Run、Stop以及Turn功能方法，AutoSystem依赖ICar接口，这样迫使AutoSystem依赖抽象接口，这就使得AutoSystem类能够应对更多的需求变化。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1)低层模块尽量都要有抽象类或接口，或者两者都有&lt;/li&gt;
&lt;li&gt;2)变量的声明类型尽量是抽象类或接口&lt;/li&gt;
&lt;li&gt;3)使用继承时遵循里氏替换原则 &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;4.接口隔离原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是最小接口，则类B和类D必须去实现他们不需要的方法，如下图：&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406231050132.jpeg&quot; alt=&quot;p2&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改&lt;/strong&gt;:将臃肿的接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则&lt;img src=&quot;http://clover.htmhub.com/img/phpdesign/20150406231127388.jpeg&quot; alt=&quot;p2&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;: 

&lt;ul&gt;
&lt;li&gt;1)&lt;code&gt;接口尽量小，但是要有限度&lt;/code&gt;。对接口进行细化可以提高程序设计灵活性 ，是不争的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。&lt;/li&gt;
&lt;li&gt;2)为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系&lt;/li&gt;
&lt;li&gt;3)提高内聚，减少对外交互。使接口用&lt;code&gt;最少的方法去完成最多&lt;/code&gt;的事情&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;5.迪米特法则（最少知道原则）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：一个对象应该对其他对象保持最少的了解&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大&lt;/p&gt;

&lt;p&gt;简单的理解就是高内聚，一个类尽量减少对其他对象的依赖，并且这个类的方法和属性能用私有的就尽量私有化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1)&lt;code&gt;只与直接的朋友通信，不要和陌生人说话&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2)过分的使用该原则，将导致系统复杂度变大。所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;6.开闭原则&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：一个软件实体如类、模块和函数应该&lt;code&gt;对扩展开放，对修改关闭&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景&lt;/strong&gt;：在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建议&lt;/strong&gt;: 当软件需求变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;设计模式分类&lt;/h1&gt;

&lt;p&gt;一般将面向对象设计模式分为三类 &lt;code&gt;创建型&lt;/code&gt;、&lt;code&gt;结构型&lt;/code&gt;、&lt;code&gt;行为型&lt;/code&gt;三种。 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;创建型&lt;/code&gt; ：创建对象时，不再由我们直接实例化对象；而是根据特定场景，由程序来确定创建对象的方式，从而保证更大的性能、更好的&lt;code&gt;架构&lt;/code&gt;优势。创建型模式主要有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;简单工厂模式（并不是23种设计模式之一）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;工厂方法&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;抽象工厂模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;单例模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;生成器模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;原型模式&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;结构型&lt;/code&gt; ：用于帮助将多个对象组织成更大的结构。结构型模式主要有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;适配器模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;桥接模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;组合器模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;装饰器模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;门面模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;亨元模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代理模式&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;行为型&lt;/code&gt; ：用于帮助系统间各对象的通信，以及如何控制复杂系统中流程。行为型模式主要有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;命令模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;解释器模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;迭代器模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;中介者模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;备忘录模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;观察者模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;状态模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;策略模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;模板模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;访问者模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;职责链模式&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 29 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2016/11/29/design-pattern/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2016/11/29/design-pattern/</guid>
        
        <category>Clover</category>
        
        <category>设计模式</category>
        
        <category>PHP</category>
        
        
      </item>
    
      <item>
        <title>PHP源码加密模块 php-beast</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;https://github.com/liexusong/php-beast&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;
  _____  _    _ _____    ____  ______           _____ _______
 |  __ \| |  | |  __ \  |  _ \|  ____|   /\    / ____|__   __|
 | |__) | |__| | |__) | | |_)/| |__     /  \  | (___    | |
 |  ___/|  __  |  ___/  |  _ ||  __|   / /\ \  \___ \   | |
 | |    | |  | | |      | |_)\| |____ / ____ \ ____) |  | |
 |_|    |_|  |_|_|      |____/|______/_/    \_\_____/   |_|
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;
此模块可以用于商业用途, 版权归原作者.&lt;br/&gt;
QQ交流群：239243332
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;php-beast可以自定义加密模块，加密模块编写教程: &lt;a href=&quot;https://github.com/liexusong/php-beast/wiki/%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B&quot;&gt;点击&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;编译安装如下:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
$ wget https://github.com/liexusong/php-beast/archive/master.zip
$ unzip master.zip
$ cd php-beast-master
$ phpize
$ ./configure --with-php-config=/usr/local/php/bin/php-config
$ sudo make &amp;&amp; make install

编译好之后修改php.ini配置文件, 加入配置项: extension=beast.so, 重启php-fpm
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;温馨提示: 可以设置较大的缓存提高效率&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;使用php-beast的性能：&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;http://git.oschina.net/liexusong/php-beast/raw/master/images/beast1.png?dir=0&amp;filepath=images/beast1.png&amp;oid=645b87003dada2eac4f1a9fcfd353aa0423f5711&amp;sha=7ec2a0ddc7780b2bab538d9f49d8b262f1bc37b7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;不使用php-beast的性能：&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
&lt;img src=&quot;http://git.oschina.net/liexusong/php-beast/raw/master/images/beast2.png?dir=0&amp;filepath=images/beast2.png&amp;oid=3f07cff6dca34b22d8933ab0ea1740a0e4f37e34&amp;sha=7ec2a0ddc7780b2bab538d9f49d8b262f1bc37b7&quot; /&gt;&lt;/p&gt;

配置项:
&lt;pre&gt;&lt;code&gt;
 beast.cache_size = size
 beast.log_file = &quot;path_to_log&quot;
 beast.enable = On
 beast.encrypt_handler = &quot;des-algo&quot;
&lt;/code&gt;&lt;/pre&gt;

支持的模块有：
&lt;pre&gt;
 1. AES
 2. DES
 3. Base64
&lt;/pre&gt;

&lt;p&gt;通过测试环境:
&lt;pre&gt;&lt;code&gt;
 Nginx + Fastcgi + (PHP-5.2.x ~ PHP-5.6.x)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h3&gt;注意&lt;/h3&gt;

&lt;p&gt;如果出现502错误，一般是由于GCC版本太低导致，请先升级GCC再安装本模块。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;怎么加密项目&lt;/h2&gt;

&lt;p&gt;安装完 &lt;code&gt;php-beast&lt;/code&gt; 后可以使用 &lt;code&gt;tools&lt;/code&gt; 目录下的 &lt;code&gt;encode_files.php&lt;/code&gt; 来加密你的项目。使用 &lt;code&gt;encode_files.php&lt;/code&gt; 之前先修改 &lt;code&gt;tools&lt;/code&gt; 目录下的 &lt;code&gt;configure.ini&lt;/code&gt; 文件，如下：
```ini
; source path
src_path = &amp;quot;&amp;quot;&lt;/p&gt;

&lt;p&gt;; destination path
dst_path = &amp;quot;&amp;quot;&lt;/p&gt;

&lt;p&gt;; expire time
expire = &amp;quot;&amp;quot;
``&lt;code&gt;
&lt;/code&gt;src&lt;em&gt;path&lt;code&gt;是要加密项目的路径，&lt;/code&gt;dst&lt;/em&gt;path&lt;code&gt;是保存加密后项目的路径，&lt;/code&gt;expire&lt;code&gt;是设置项目可使用的时间 (&lt;/code&gt;expire&lt;code&gt;的格式是：&lt;/code&gt;YYYY-mm-dd HH:ii:ss&lt;code&gt;)。
修改完&lt;/code&gt;configure.ini&lt;code&gt;文件后就可以使用命令&lt;/code&gt;php encode_files.php` 开始加密项目。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;制定自己的php-beast&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;php-beast&lt;/code&gt; 有多个地方可以定制的，以下一一列出：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1.&lt;/em&gt; 使用 &lt;code&gt;header.c&lt;/code&gt; 文件可以修改 &lt;code&gt;php-beast&lt;/code&gt; 加密后的文件头结构，这样网上的解密软件就不能认识我们的加密文件，就不能进行解密，增加加密的安全性。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2.&lt;/em&gt; &lt;code&gt;php-beast&lt;/code&gt; 提供只能在指定的机器上运行的功能。要使用此功能可以在 &lt;code&gt;networkcards.c&lt;/code&gt; 文件添加能够运行机器的网卡号，例如：
&lt;code&gt;c
char *allow_networkcards[] = {
    &amp;quot;fa:16:3e:08:88:01&amp;quot;,
    NULL,
};
&lt;/code&gt;
这样设置之后，&lt;code&gt;php-beast&lt;/code&gt; 扩展就只能在 &lt;code&gt;fa:16:3e:08:88:01&lt;/code&gt; 这台机器上运行。另外要注意的是，由于有些机器网卡名可能不一样，所以如果你的网卡名不是 &lt;code&gt;eth0&lt;/code&gt; 的话，可以在 &lt;code&gt;php.ini&lt;/code&gt; 中添加配置项： &lt;code&gt;beast.networkcard = &amp;quot;xxx&amp;quot;&lt;/code&gt; 其中 &lt;code&gt;xxx&lt;/code&gt; 就是你的网卡名，也可以配置多张网卡，如：&lt;code&gt;beast.networkcard = &amp;quot;eth0,eth1,eth2&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3.&lt;/em&gt; 使用 &lt;code&gt;php-beast&lt;/code&gt; 时最好不要使用默认的加密key，因为扩展是开源的，如果使用默认加密key的话，很容易被人发现。所以最好编译的时候修改加密的key，&lt;code&gt;aes模块&lt;/code&gt; 可以在 &lt;code&gt;aes_algo_handler.c&lt;/code&gt; 文件修改，而 &lt;code&gt;des模块&lt;/code&gt; 可以在 &lt;code&gt;des_algo_handler.c&lt;/code&gt; 文件修改。&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;使用过程&lt;/h3&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装好php-beast喝php扩展&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编写 php-beast-master/tools/configure.ini&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;  ; source path
  src_path = &quot;/home/wwwroot/demo9.htmhub.com.bak&quot;

  ; destination path
  dst_path = &quot;/home/wwwroot/demo9.htmhub.com&quot;

  ; expire time
  expire = &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;执行编译过程 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;php  php-beast-master/tools/encode_files.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此时会将配置好的代码加密，解密过程是通过 beast.so 在线解密的。PHP文件可以正常访问。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2016/08/16/php-codes-encode/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2016/08/16/php-codes-encode/</guid>
        
        <category>Clover</category>
        
        <category>Linux</category>
        
        <category>PHP</category>
        
        
      </item>
    
      <item>
        <title>Linux文件加密之ccrypt</title>
        <description>&lt;h1&gt;ccrypt&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;ccrypt是为了取代UNIX crypt而设计的，这个实用工具可用于文件和数据流加密及解密。它使用Rijndael密码&lt;/code&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;sudo apt-get install ccrypt
# yum install ccrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h2&gt;使用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;加密文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;ccencrypt filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入两次密码&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;解密文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;ccdecrypt filename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提供加密时输入的同一个密码才能解密&lt;/p&gt;

&lt;p&gt;它使用ccencrypt来加密、使用ccdecrypt来解密。一定要注意，加密时，原始文件(tecmint.txt)换成了tecmint.txt.cpt;解密时，加密文件(tecmint.txt.cpt)换成了原始文件(tecmint.txt)。你可以使用ls命令来予以核查&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2016/08/16/linux-file-encode/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2016/08/16/linux-file-encode/</guid>
        
        <category>Clover</category>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Redis Study 之二 入门指南</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考书籍：Redis入门指南（第二版）李子骅 编著 人民邮电出版社&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;一、准备&lt;/h1&gt;

&lt;h2&gt;1）启动Redis&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;直接启动
    &lt;code&gt;bash
    # redis-server
&lt;/code&gt;
Redis 服务器 默认 会 使用 6379 端口 ,通过-- port 参数 可以 自定义 端口&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# redis-server --port 6380      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过初始化脚本启动（略过）      &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定配置文件启动&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;2）停止Redis&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Redis有可能正在将内存中的数据同步到硬盘中，强行终止Redis进程可能会导致数据 丢失。 正确停止Redis的方式应该是向Redis发送SHUTDOWN 命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# redis-cli shutdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当Redis收到shutdown命令后，会先断开所有的客户端连接，然后根据配置执行持久化，最后完成退出&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redis会妥善处理&lt;code&gt;sigterm&lt;/code&gt;信号   ,所以使用kill Redis进程的PID也可以正常结束Redis,效果与发送shutdown命令一样。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;3）Redis命令行客户端&lt;/h2&gt;

&lt;p&gt;redis-cli是Redis自带的基于命令行的Redis客户端&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;发送命令&lt;/p&gt;

&lt;p&gt;redis-cli向Redis发送命令有两种方式。&lt;/p&gt;

&lt;p&gt;一是将命令作为redis-cli的参数执行 ,&lt;code&gt;-h&lt;/code&gt;自定义地址 &lt;code&gt;-p&lt;/code&gt;自定义端口号&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# redis-cli -h 127.0.0.1 -p 6379
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redis提供&lt;code&gt;PING&lt;/code&gt;命令来测试客户端语Redis连接是否正常&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# redis-cli PING
PONG    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二是不附带参数运行redis-cli，这样会进入交互模式可以自由输入命令&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# redis-cli
redis 127.0.0.1:6379&amp;gt; PING
PONG
redis 127.0.0.1:6379&amp;gt; ECHO hi
&quot;hi&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令返回值&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;状态回复&lt;/p&gt;

&lt;p&gt;状态是最简单的一种回复如SET 会回复OK &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;* 错误回复

    当出现命令不存在或命令格式有错误时Redis会返回错误回复（error replay）.错误回复以（error）开头，并在后面跟上错误信息。如执行一个不存在的命令：

        redis&amp;gt;ERRORCOMMEND
        (error)ERR unknown command &#39;ERRORCOMMEND&#39;

    在 2. 6 版本 时， 错误 信息 均 是以“ ERR” 开头， 而在 2. 8 版 以后， 部分 错误 信息 会 以 具体 的 错误 类型 开头， 如： 

        redis&amp;gt; LPUSH key 1 (integer) 1
        redis&amp;gt; GET key 
        (error) WRONGTYPE Operation against a key holding the wrong kind of value 

    这里 错误 信息 开头 的“ WRONGTYPE” 就 表示 类型 错误， 这个 改进 使得 在调 试 

* 整数回复  
    Redis没有整数类型，但提供了用于整数操作的命令。整数回复以（integer）开头，并在后面跟上整数数据：

        redis&amp;gt; INCR foo
        (integer) 1
* 字符串回复
    字符串回复是最常见的一种回复类型，当请求一个字符串类型键的值或一个其他键中的某个元素时就会得到一个字符串。字符串回复以双引号包裹：

        redis&amp;gt; GET foo
        &quot;1&quot;     
* 多行字符串回复
    多行字符串回复中的每行字符串都以一个序号开头

        redis &amp;gt; KEYS *
        1) &quot;bar&quot;
        2) &quot;foo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4）配置&lt;/h2&gt;

&lt;p&gt;通过&lt;code&gt;redis-server&lt;/code&gt;的启动参数port设置了Redis的端口号，除此之外还有其他的配置选项，如开启持久化，日志级别等。由于配置选项多，redis支持通过配置文件来配置这些选        &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#redis-server /path/to/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过启动参数传递同名的配置选项会覆盖配置文件中相应的参数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#redis-server /path/to/redis.conf --loglevel warning
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Redis提供了一个配置文件的模板redis.conf位于源代码目录&lt;/p&gt;

&lt;p&gt;还可以在运行时通过&lt;code&gt;CONFIG SET&lt;/code&gt; 命令在不重启Redis的情况下动态修改部分Redis配置&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt;CONFIG SET loglevel warning
OK      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并不是所有的配置都可以使用CONFIG SET 命令修改      &lt;/p&gt;

&lt;h2&gt;4）多数据库&lt;/h2&gt;

&lt;p&gt;每个 数据库 对外 都是 以 一个 从 0 开始 的 递增 数字 命名， Redis 默认 支持 16 个 数据库， 可以 通过 配置 参数 databases 来 修改 这一 数字。 客户 端 与 Redis 建立 连接 后 会 自动 选择 0 号 数据库， 不过 可以 随时 使用SELECT命令更换数据库，如要选择1号数据库：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt;SELECT 1
    OK
    redis[1] GET foo
    (nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redis不支持自定义数据库的名字       &lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;二、入门&lt;/h1&gt;

&lt;h2&gt;1）字符串类型&lt;/h2&gt;

&lt;p&gt;一个字符串类型键允许存储的数据的最大容量是512M。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;赋值与取值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SET key value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET key&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;set和get是redis中最简单的两个命令&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;当键不存在时返回空结果
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;递增数字&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INCR key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当存储的字符串是整数形式时，Redis提供了一个实用的命令INCR，其作用是让当键值递增，并返回递增后的值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt;INCR num
    (integer) 1
    redis&amp;gt;INCR num
    (integer) 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当要操作的键不存在时默认键值为0，所以第一次递增后的结果是1.&lt;/p&gt;

&lt;p&gt;当键值不是整数是会提示错误&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; SET foo lorem
    OK 
    redis&amp;gt; INCR foo
    (error) ERR value is not an integer or out of range
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命令拾遗&lt;/p&gt;

&lt;p&gt;1).增加指定的整数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INCRBY key increment
INCRBY通过 increment 参数指定一次增加的数值
redis&amp;gt; INCRBY bar 2
(integer)2
redis&amp;gt; INCRBY bar 3
(integer)5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2).减少指定的整数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;DECR key
DECRBY key increment
redis&amp;gt; DECR bar 
(integer)4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3).增加指定浮点数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;INCRBYFLOAT key increment&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;递增一个双精度浮点数  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt;INCRBYFLOAT bar 2.7
&quot;6.7&quot;
redis&amp;gt;INCRBYFLOAT bar 5E+4
&quot;50006.69999999999999929&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4).向尾部追加值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;APPEND key value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;APPEND 作用是向键值的末尾追加value.如果键不存在则将该值设置为value,即相当于SET key value.返回值是追加后字符串的总长度&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt;SET key hello
OK
redis&amp;gt;APPEND key &quot; world!&quot;
（integer）12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时key的值是&amp;quot;hello world!&amp;quot;。APPEND命令的第二个参数加了双引号，原因是该参数包含空格，在redis-cli中输入需要双引号以示区分&lt;/p&gt;

&lt;p&gt;5).获取字符串长度&lt;/p&gt;

&lt;p&gt;&lt;code&gt;STRLEN key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;STRLEN 命令返回键值的长度，如果键不存在返回0 &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt;STRLEN key
(interger)12
redis&amp;gt;SET key 你好
OK
redis&amp;gt;STRLEN key
(interger)6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前面提到字符串类型可以存储二进制数据，所以它可以存储任意编码的字符串。例子中接收到的是使用UTF-8编码的中文，由于你好的UTF-8编码的长度都是3，所以返回6。&lt;/p&gt;

&lt;p&gt;6).同时获得/设置多个键值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MGET key[key ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MMSET key value [key value ...]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; MSET key1 v1 key2 v2 key3 v3
redis&amp;gt; GET key2
&quot;v2&quot;
redis &amp;gt; MGET key1 key3
1)&quot;v1&quot;
2)&quot;v3&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7). 位操作&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GETBIT key offset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SETBIT key offset value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;BITCOUNT key [start] [key ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;BITOP operation destkey key [key ...]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h2&gt;2）散列类型&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;赋值与取值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HSET key field value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HGET key field&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HMSET key field value [field value ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HMGET key field [field ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HGETALL key&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; HSET car price 500
(interger)1
redis&amp;gt; HSET car name BMW
(interger)1
redis&amp;gt;HEGT car name
&quot;BMW&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HSET命令方便之处在于不区分插入和更新操作，这意味着修改数据时不用事先判断字段是否存在来决定要执行的是插入操作还是更新操作。当执行的是插入操作时HSET会返回1，当执行的是更新操作是 HSET返回0。&lt;code&gt;当键本身不存在是，HSET命令还会自动创建&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;REDIS中每个键都属于一个明确的数据类型，如通过HSET命令建立的键都是散列类型，通过SET命令建立的键是字符串类型。使用一种数据类型的命令操作另外一种数据类型的键会提示错误“ERR Operation against a key holding the wrong kind of value”&lt;/code&gt; &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; HMGET car price name
1)&quot;500&quot;
2)&quot;BMW&quot;

redis&amp;gt; HGETALL car  
1)&quot;price&quot;
2)&quot;500&quot;
3)&quot;name&quot;
4)&quot;BMW&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断字段是否存在&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;HEXISTS key field&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HEXISTS命令用来判断一个字段是否存在。如果存在则返回1，否则返回0（&lt;code&gt;如果键不存在也会返回0&lt;/code&gt;）。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt;HEXISTS car model
    (integer)0
    redis&amp;gt;HSET car model C200
    (integer)1
    redis&amp;gt;HEXISTS car model
    (integer)1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当字段不存在时赋值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HSETNX key field value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HSETNX 命令与HSET命令相似，区别在于如果字段已经存在，HSETNX命令不执行任何操作&lt;/p&gt;

&lt;p&gt;HSETNX 命令是原子操作，不用担心竞态条件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加数字&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HINCRBY key field increment&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; HINCRBY person score 60
(integer)60
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之前person键不存在，HINCARBY命令会自动建立该键并默认score字段在执行前的值为0.命令的返回值是增值后的字段值&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除字段&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HDELkey field [field]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HDEL 命令可以删除一个或者多个字段，返回值是被删除的字段个数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; HDEL car price
(integer)1
redis&amp;gt; HDEL car price       
(integer)0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储文章数据&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$postID=INCR posts:count
#判断用户输入的slug是否可用，如果可用则记录
$isSlugAvailable=HSETNX slug.to.id,$slug ,$postIID
if $isSlugAvailable is 0
#slug已经用过了需要提示更换slug
exit
HMSET post:$postID,title,$title,content,$content,slug,$slug,...
这段代码使用了HSETNX命令原子的实现了HEXISTS和HSET两个命令以避免竞态条件。当用户访问文章时，我们从网址中得到文章的缩略名，并查询slug.to.id键来获取文章ID：
$postID=HGET slug.to.id,$slug
if not $postID
print 文章不存在
exit
$post=HGETALL post:$postID
print文章标题:$post.title
需要注意的是如果要修改文章的缩略名一定不能忘了修改slug.to.id键对应的字段。
#判断新的slug是否可用，如果可用则记录
$isSlugAvailable=HSETNX slug.to.id ,$newSlug,42
if $isSlugAvailable is 0
exit
#获得旧的缩略名 
$oldSlug=HGET post:42,slug
#设置新的缩略名
HSET post:42,slug,$newSlug
#删除旧的缩略名
HDEL slug.to.id ,$oldslug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令拾遗&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1）只获取字段名或字段值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEKYS key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HVALS key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有时仅仅需要获取键中所有字段的名字而不需要字段值，那么可以使用HEKYS命令&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; HKEYS car 
    1)&quot;name&quot;
    2)&quot;model&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HVALS 命令与HEKYS命令相对应，HVALS命令用来获得键中所有字段值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; HVALS car
    1)&quot;BMW&quot;
    2)&quot;C200&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2)获取字段数量&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HLEN key&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; HLEN car
(integer) 2                 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3）列表类型&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;向列表两端增加元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LPUSH key value [value ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RPUSH key value [value ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LPUSH命令用来向列表左边增加元素，返回值表示增加元素后列表的长度&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; LPUSH numbers 1
    (integer) 1

    [1]

    redis&amp;gt; LPUSH numbers 2 3 
    (integer) 3

    [ 3 2 1 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LPUSH 会向列表左边先加入 2 再加入 3&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; RPUSH numbers 0 -1
    (integer) 5
    [3 2 1 0 -1]    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从列表两端弹出元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LPOP key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RPOP key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有进有出，LPOP可以从列表左边弹出一个元素。LPOP命令执行两步操作：第一步是将列表左边的元素从列表移除，第二步是返回被移除的元素值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; LPOP numbers
    &quot;3&quot;
    redis&amp;gt; RPOP numbers
    &quot;-1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;结合上面提到的4个命令可以使用列表类型来模拟栈和队列的操作&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;栈：LPUSH和LPOP   RPUSH和RPOP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;队列：LPUSH和RPOP  RPUSH和LPOP&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取列表中元素的个数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LLEN key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当键不存在时LLEN会返回0&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt;LLEN numbers
    (integer) 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LLEN功能类似SQL语句 SELECT COUNT(*) FROM table_name 但是LLEN的时间复杂度为O(1) ,使用时Redis会直接读取现成的值，而不需要统计&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取列表片段&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LRANGE key start stop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;返回索引从start到stop之间的所有元素（包含两端的元素），起始索引为0&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; LRANGE numbers 0 2
    1)&quot;2&quot;
    2)&quot;1&quot;
    3)&quot;0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LRANGE在取得列表片段的同时不会像LPOP一样删除该片段&lt;/p&gt;

&lt;p&gt;LRANGE也支持负索引 表示从右边开始计算序数
-1 表示最右边第一个元素 -2便是最右边第二个元素&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; LRANGE nubmers -2 -1
    1)&quot;1&quot;
    2)&quot;0&quot;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显然，LRANGE numbers 0 -1 可以获取列表中所有元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;特殊情况&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;* 如果start的索引位置比stop的索引位置靠后，返回空列表

* 如果stop大于实际的索引范围，则返回到列表最右边的元素

```
    redis&amp;gt; LRANGE nubmers 1 999
    1)&quot;1&quot;
    2)&quot;0&quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;删除列表中指定的值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LREM key count value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LREM 会删除列表前count个值为value的元素，返回值是实际删除的元素个数，根据count值的不同，LREM执行方式有差异&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;* 当count&amp;gt;0时，LREM会从列表左边开始删除前count个值为value的元素

* 当count&amp;lt;0时，LREM会从列表右边开始删除|count|个值为value的值

* 当count=0时，LREM会删除所有值为value的元素
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命令拾遗&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.&lt;/code&gt;获得/设置指定索引的元素值&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LINDEX key index&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LSET key index value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LINDEX 返回指定索引的元素&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; LINDEX numbers 0
    &quot;2&quot;
    redis&amp;gt; LINDEX numbers -1
    &quot;0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LSET是另一个通过索引操作列表的命令,它会将索引为index的元素赋值为value.例如&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; LSET nubmers 1 7 
OK 
redis&amp;gt; LINDEX nubmers 1
&quot;7&quot;         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;2.&lt;/code&gt;只保留列表指定片段&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LTRIM key start end&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LTRIM命令可以删除指定索引范围之外的所有元素，其指定列表范围的方法和LRANGE命令&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; LRANGE numbers 0 -1
    1)&quot;1&quot;
    2)&quot;2&quot;
    3)&quot;7&quot;
    4)&quot;3&quot;
    &quot;0&quot;
    redis&amp;gt; LTRIM numbers 1 2
    OK
    redis&amp;gt; LRANGE numbers 0 1
    1)&quot;2&quot;
    2)&quot;7&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LTRIM命令常和LPUSH命令一起来使用用来限制列表中元素的数量，比如日志只保留100条&lt;/p&gt;

&lt;p&gt;LPUSHlogs $newlog&lt;/p&gt;

&lt;p&gt;LTROM logs 0 99&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3.&lt;/code&gt;向列表中插入元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LINSERT key BEFORE | AFTER pivot value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LINSERT 命令首先会在列表从左到右查找值为pivot的元素，然后根据BEFORE还是AFTER来决定将value插入到该元素的前面还是后面&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;    redis&amp;gt; LRANGE numbers 0 -1
    1)&quot;2&quot;
    2)&quot;7&quot;
    3)&quot;0&quot;
    redis&amp;gt; LINSERT numbers AFTER 7 3
    (integer) 4
    redis&amp;gt; LRANGE numbers 0 -1
    1)&quot;2&quot;
    2)&quot;7&quot;
    3)&quot;3&quot;
    4)&quot;0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.将元素从一个列表转到另一个列表&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RPOPLPUSH source destination&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;RPOPLPUSH功能：先执行RPOP命令再执行LPUSH命令。RPOPLPUSH命令会先从source列表类型键的右边弹出一个元素，然后将其加入到destination列表类型键的左边，并返回这个元素的值，整个过程是原子的。&lt;/p&gt;

&lt;p&gt;当把列表类型作为队列使用时，RPOPLPUSH命令可以很直观的在多个队列中传递数据。当source和destination相同时，RPOPLPUSH命令会不断地将对尾的元素移到队首，借助这个特性我们可以实现一个网站监控系统：使用一个队列存储需要监控的网址，然后监控程序不断地使用RPOPLPUSH命令循环取出一个网址来测试可用性。RPOPLPUSH的好处在于在程序执行过程中仍然可以不断的向网址列表中加入新网址，整个系统易扩展，允许多个客户端同时处理队列&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;4）集合类型&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;在集合中的每个元素都是不同的，且没有顺序。一个集合类型（set）键可以存储之多232-1个字符串&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;增加/删除元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SADD key member [member ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SREM key member [member ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SADD命令用来向集合中增加一个或多个元素，如果键不存在则自动创建。因为一个集合中不能有相同的元素，相同键的元素会被忽略执行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; SADD letters a 
(integer) 1
redis&amp;gt; SADD letters a b c
(integer) 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二条SADD命令返回值为2是因为元素a已经存在，所以实际只加入了两个元素&lt;/p&gt;

&lt;p&gt;SREM命令用来从集合正删除一个或者多个元素，并返回删除成功的个数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; SREM letters c d 
(integer) 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得集合中的所有元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SMEMBERS key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SMEMBERS命令会返回集合中的所有元素&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; SMEMBERS letters
1)&quot;b&quot;
2)&quot;a&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断元素是否在集合中&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SMEMBERS key member&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;判断一个元素是否在集合中是一个时间复杂度为O(1)的操作，无论集合元素多少，都可以很快速的返回结果。当值存在时SMEMBERS命令返回1，不存在返回0&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; SMEMBERS letters a 
(integer) 1
redis&amp;gt; SMEMBERS letters d
(integer) 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;集合间运算&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SDIFF key [key ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SINTER key [key ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SUNION key [key ...]&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.&lt;/code&gt;SDIFF用来对多个集合执行差集运算.&lt;/p&gt;

&lt;p&gt;集合A与集合B的差集表示A-B，代表所有属于A且不属于B的元素构成的集合&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt; SADD setA 1 2 3
(integer) 3
redis &amp;gt; SADD setB 2 3 4
(integer) 3
redis &amp;gt; SDIFF setA set B 
1）&quot;1&quot;
redis &amp;gt; SDIFF setB setA 
1) &quot;4&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;2.&lt;/code&gt;SDIFF支持同时传入多个键&lt;/p&gt;

&lt;p&gt;&lt;code&gt;redis &amp;gt; SDIFF setA setB setC&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;计算顺序是先计算setA-setB,在计算结果与setC差集。&lt;/p&gt;

&lt;p&gt;SINTER命令用来对多个集合执行交集运算。&lt;/p&gt;

&lt;p&gt;集合A与集合B的交集表示为A∩B，代表所有属于A且属于B的元素构成的集合&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt; SADD setA 1 2 3
(integer) 3
redis &amp;gt; SADD setB 2 3 4
(integer) 3
redis &amp;gt; SINTER setA setB
1)&quot;2&quot;
2)&quot;3&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;3.&lt;/code&gt;SUNION 命令用来对多个集合执行并集运算&lt;/p&gt;

&lt;p&gt;集合A与集合B的并集表示为A∪B，代表所有属于A或者属于B的元素构成的集合&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt; SADD setA 1 2 3
(integer) 3
redis &amp;gt; SADD setB 2 3 4
(integer) 3
redis &amp;gt; SINTER setA setB
1)&quot;1&quot;
2)&quot;2&quot;
3)&quot;3&quot;
4)&quot;4&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令拾遗&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.&lt;/code&gt;获得集合中元素个数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SCARD key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SCARD命令用来获得集合中的元素个数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt; SMEMBERS letters
1)&quot;b&quot;
2)&quot;2&quot;
redis &amp;gt; SCARD letters
(integer)2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行集合运算并将结果存储&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SDIFFSTORE destination key  [key ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SINTERSTORE destination key [key ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SUNINONSTORE destination key [key ...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;结果存储在 destination的键中&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2.&lt;/code&gt;随机获得集合中的元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SRANDMEMBER key    [count]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SRANDMEMBER 命令用来随机从集合中获取一个元素&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt; SRANDMEMBER letters
&quot;a&quot;
redis &amp;gt; SRANDMEMBER letters
&quot;b&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;count来控制一次获取多个元素&lt;/p&gt;

&lt;p&gt;1）当count为正数时，随机获取count个数不重复的数，大于元素总个数，返回全部&lt;/p&gt;

&lt;p&gt;2）当count为负数时，随机获取|count|个元素，这些元素&lt;code&gt;有可能相同&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3.&lt;/code&gt;从集合中弹出一个元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SPOP key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;由于集合是无序的，所以SPOP会从集合中随机选择一个元素弹出&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt;SOPO letters 
&quot;b&quot; 
redis &amp;gt; SMEMBERS letters
1)&quot;a&quot;
2)&quot;c&quot;
3)&quot;d&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;5）有序集合类型&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;在集合的基础上有序集合类型为集合中的每个元素都关联了一个分数，这使得我们不仅可以完成插入、删除和判断元素是否存在等集合类型支持的操作，还能够获得分数最高（或最低）的前N个元素&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有序集合类型在某些方面和列表类型有些相似&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;* （1）二者都是有序的
* （2）二者都可以获得某一范围的元素
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是二者有很大的区别，使得他们的应用场景也不相同&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;* （1）列表类型通过链表实现，获取靠近两端的元素极快，当元素增多时，访问中间元素的速度会变慢，所以他更加适合实现如“新鲜事”“日志”这样很少访问中间元素的应用
* （2）有序集合类型是使用散列表和跳跃表实现的，即使读取中间部分的 数据也很快（时间复杂度是O(log(N))）
* （3）列表中不能简单的调整某个元素的位置，但是有序集合可以（通过更改元素的分数）
* （4）`有序集合比列表类型更消耗内存`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;增加元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZADD key score member [score member...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ZADD命令用来向有序集合中添加一个元素和该元素的分数，如果该元素已经存在则会用新的分数替换原有的分数。ZADD返回的是新加入到元素集合中的个数（不包含之前已经存在的元素）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZADD scoreboard 89 Tom 67 Peter 100 David
(integer)3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZADD scoreboard  76 Peter 
(integer)0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分数不仅可以是整数，还支持双精度浮点数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZADD testboard 17E+307 a
(integer)1
redis&amp;gt; ZADD testboard 1.5 b
(integer)1
redis&amp;gt; ZADD testboard +inf c
(integer)1
redis&amp;gt; ZADD testboard -inf d
(integer)1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中+inf和-inf分别表示正无穷和负无穷&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得元素的分数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZSCORE key member&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;ZSCORE scoreboard Tom 
&quot;89&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得排名在某个范围的元素列表   &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZRANGE key start stop [WITHSCORES]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZREVRANGE key start stop [WITHSCORES]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ZRANGE命令会按照元素分数从小到大的顺序返回索引从start 到 stop的所以元素（包含两端的元素）。ZRANGE和LRANGE类似，索引都是从0开始，负值代表从后向前查找（-1表示最后一个元素）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZRANGE scoreboard 0 2
1)&quot;Peter&quot;
2)&quot;Tom&quot;
3)&quot;David&quot;
redis&amp;gt; ZRANGE scoreboard 1 -1
1)&quot;Tom&quot;
2)&quot;David&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要同时获得元素的分数的话可以在尾部加上 WITHSCORES 参数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZRANGE scoreboard 0 -1 WITHSCORES
1)&quot;Peter&quot;
2)&quot;76&quot;
3)&quot;Tom&quot;
4)&quot;89&quot;
5)&quot;David&quot;
6)&quot;100&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ZRANGE命令的时间复杂度为O(log n+m)(其中n为有序集合的基数，m为返回元素的个数)&lt;/p&gt;

&lt;p&gt;分数相同的按照字典顺序排列&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取指定分数范围的元素&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;该命令返回按照分数从小到大顺序返回分数在 min 和max之间的（包含min,max）元素&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZRANGEBYSCORE scoreboard 80 100
1)&quot;Tom&quot;
2)&quot;David&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不包含端点 加上  &amp;quot;(&amp;quot; 符号&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZRANGEBYSCORE scoreboard 80 (100
1)&quot;Tom&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大于80分&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZRANGEBYSCORE scoreboard (80 +inf
1)&quot;Tom&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;小于80分&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis&amp;gt; ZRANGEBYSCORE scoreboard -inf (80
1)&quot;Tom&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LIMIT offset count 用法和 sql类似获得元素列表基础上向后偏移offset个元素，并只获取前count个元素&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加某个元素的分数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZINCRBY key increment member&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ZINCRBY 可以增加一个元素的分数，返回增加后的分数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt; ZINCRBY scoreborad 4 Jerry
&quot;60&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;increment 也可以是个负数表示减分&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;redis &amp;gt; ZINCRBY scoreborad -4 Jerry
&quot;56&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果元素不存在，先会建立它并将它的分数赋值为0再执行操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2016/07/04/redis-study-2/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2016/07/04/redis-study-2/</guid>
        
        <category>Clover</category>
        
        <category>Redis</category>
        
        <category>DB</category>
        
        
      </item>
    
      <item>
        <title>Gulp-前端自动化构建工具</title>
        <description>&lt;h1&gt;Gulp-Web前端自动化开发工具&lt;/h1&gt;

&lt;hr&gt;

&lt;h3&gt;入门指南&lt;/h3&gt;

&lt;h4&gt;1. 全局安装 gulp&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ npm install --global gulp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2. 作为项目的开发依赖（devDependencies）安装&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;$ npm install --save-dev gulp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3. 在项目根目录下创建一个名为 gulpfile.js 的文件&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;var gulp = require(&#39;gulp&#39;);

gulp.task(&#39;default&#39;, function() {
  // 将你的默认的任务代码放在这
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4. 运行 gulp：&lt;/h4&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://clover.htmhub.com/2016/06/30/gulp-study/</link>
        <guid isPermaLink="true">http://clover.htmhub.com/2016/06/30/gulp-study/</guid>
        
        <category>Clover</category>
        
        <category>Web</category>
        
        <category>HTML</category>
        
        <category>Gulp</category>
        
        
      </item>
    
  </channel>
</rss>
